# Chapter 1 - Values, Types, and Operators

Bits zijn 0 en 1
   0   0   0   0   1   1   0   1
 128  64  32  16   8   4   2   1

= 13

## - Values

stukken informatie = chunks

## - Numbers
Javascript gebruikt 64 bits om waardes in op te slaan
Fractienummers worden gescreven met een . (9.81)

Voor grote of kleine getallen kun je ook wetenschappelijke elementen gebruiken zoals e (2.998e8 = 2.998 × 108 = 299,800,000)

getallen boven de 9 biljoen worden niet altijd evevn nauwkeurig berekend. Net zoals pi (π) (3,14)


## - Arithmetic

+, -, * etc worden operators genoemd (je kunt er iets mee).
% word gekeken naar de restwaarde of het deelbaar is door het getal (144 % 12 = 0) 
(314 % 100 = 14) 300 kan je delen door 100 maar dan houdt je er 14 over

Hallo, meneer van dalen wacht op antwoord wordt hier ook gebruikt
Haakjes
machtsverheffen		(word niet gebruikt)
Vermenigvuldigen
delen
wortel				(word niet gebruikt)
optellen
aftrekken

NAN staat voor Not A Number

## - Strings
Strings zijn een stuk tekst
"Dit is een string"
'dit ook'

Door een \ teken kun je de tekst laten veranderen
\n = nieuwe regel

Strings kunnen niet worden vermenigvuldigd, gedeeld etc worden
Wel kun je ze aan elkaar plakken "hi"+"er"+"door"

`half of 100 is ${100 / 2}`
Door het $ teken wordt de code wel uitgevoerd en daarna geconverteerd naar een string

met typof kun je erachter komen wat de waarde inhoudt (string, number etc)
console.log(typeof 4.5)
// → number
console.log(typeof "x")
// → string

## - Boolean

Waarde is ja of nee (true or false)
console.log(3 > 2)
// → true
console.log(3 < 2)
// → false

console.log(false || true)
// → true
console.log(false || false)
// → false

console.log(true && false)
// → false
console.log(true && true)
// → true

## Automatic type conversion
Soms kan javascript zelf een berekening uitvoeren als je het niet goed gedaan hebt
Zoals hier te zien is zorgt het systeem ervoor dat de string omgezet wordt naar een nummer
Dit wordt ookwel coercion genoemd
console.log(8 * null)
// → 0
console.log("5" - 1)
// → 4
console.log("5" + 1)
// → 51
console.log("five" * 2)
// → NaN
console.log(false == 0)
// → true




##Extra info
square(12)
de 12 is hier een argument
square(x)
de x is hier een parameter

Scope = variabel
Local scope is alleen locaal beschikbaar (in een functie)
Global scope is overal beschikbaar (in meerdere functies)

Higher order zijn voorgemaakt functies in javascript.
Zoals .map .filter en .reduce

object = var persoon = firstname: "John",
						age: 50

